---
import Layout from '../layouts/Layout.astro';
---

<Layout title="Binary Font Creator">
    <main class="max-w-6xl mx-auto px-4 py-8 flex flex-col gap-8">
        <h1 class="text-3xl font-bold text-center mb-6">Binary Font Creator</h1>
        <div class="flex flex-col md:flex-row gap-8">
            <!-- Left: Letter binary input -->
            <div class="flex flex-col gap-4 items-center">
                <label class="mb-2 font-semibold">
                    Current letter:
                    <select id="letterSelect" class="ml-2 border px-2 py-1"></select>
                </label>
                <label class="font-semibold mb-1" for="binaryInput">Edit 8x8 letter (8 lines, 3 bits each: 000-111):</label>
                <textarea id="binaryInput" rows="8" cols="6" class="font-mono border p-2 w-28 h-36 text-center" spellcheck="false"></textarea>
            </div>
            <!-- Center: Display Grid -->
            <div class="flex flex-col items-center gap-2">
                <h2 class="font-semibold text-center">Preview Grid</h2>
                <div id="grid" class="grid grid-cols-8 gap-0.5 border p-2" style="width:104px"></div>
            </div>
            <!-- Right: Controls & live text preview -->
            <div class="flex-1 min-w-[320px]">
                <h2 class="font-semibold mb-2">Text Preview</h2>
                <textarea id="textInput" rows="3" class="w-full border p-2 mb-2" placeholder="Type your text here"></textarea>
                <canvas id="previewCanvas" width="640" height="64" class="border bg-black"></canvas>
                <div class="text-xs text-gray-500 mt-1">Supports long text (up to 80 letters wide)</div>
            </div>
        </div>
    </main>

    <script is:inline>
        document.addEventListener('DOMContentLoaded', () => {
            const letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
            const letterSelect = document.getElementById('letterSelect');
            const grid = document.getElementById('grid');
            const textInput = document.getElementById('textInput');
            const binaryInput = document.getElementById('binaryInput');
            const canvas = document.getElementById('previewCanvas');
            const ctx = canvas.getContext('2d');

            // Create default fontData: each letter has 8 rows, each row is a 3-bit string ("000")
            const fontData = {};
            letters.split('').forEach((l) => {
                fontData[l] = Array(8).fill('000'); // 8 lines of "000"
            });

            // Populate dropdown
            letters.split('').forEach((l) => {
                const opt = document.createElement('option');
                opt.value = l;
                opt.textContent = l;
                letterSelect.appendChild(opt);
            });

            let currentLetter = letters[0];
            letterSelect.value = currentLetter;

            // Utilities for binary->gray color
            function binToGray(bin) {
                // bin: "000".."111"
                const val = parseInt(bin, 2);
                const gray = Math.round((255 * val) / 7); // 0..7 mapped to 0..255
                return `rgb(${gray},${gray},${gray})`;
            }

            // Render the grid (display only)
            function renderGrid() {
                grid.innerHTML = '';
                const pattern = fontData[currentLetter];
                for (let row = 0; row < 8; row++) {
                    const bin = pattern[row] || '000';
                    for (let col = 0; col < 8; col++) {
                        const cell = document.createElement('div');
                        cell.className = 'w-3 h-3 border border-gray-400';
                        cell.style.backgroundColor = binToGray(bin);
                        grid.appendChild(cell);
                    }
                }
            }

            // Render binary textarea for current letter
            function renderBinaryInput() {
                binaryInput.value = (fontData[currentLetter] || []).join('\n');
            }

            // Update fontData from binary textarea
            function updateFontDataFromBinaryInput() {
                const lines = binaryInput.value.split('\n');
                // Only keep first 8 lines, pad with "000"
                fontData[currentLetter] = Array(8)
                    .fill('000')
                    .map((_, i) => {
                        let line = lines[i] || '000';
                        line = line.replace(/[^01]/g, '').slice(0, 3); // Only first 3 bits
                        return line.padEnd(3, '0');
                    });
                renderGrid();
                renderCanvas();
            }

            // Draw the preview canvas (many letters)
            function renderCanvas() {
                ctx.fillStyle = 'black';
                ctx.fillRect(0, 0, canvas.width, canvas.height);
                const text = textInput.value.toUpperCase().replace(/[^A-Z]/g, '');
                const pixelSize = 8;
                for (let i = 0; i < text.length; i++) {
                    const char = text[i];
                    const pattern = fontData[char];
                    if (!pattern) continue;
                    for (let row = 0; row < 8; row++) {
                        const bin = pattern[row] || '000';
                        const gray = binToGray(bin);
                        ctx.fillStyle = gray;
                        for (let col = 0; col < 8; col++) {
                            ctx.fillRect(i * 8 * pixelSize + col * pixelSize, row * pixelSize, pixelSize, pixelSize);
                        }
                    }
                }
            }

            // Event listeners
            letterSelect.addEventListener('change', (e) => {
                currentLetter = e.target.value;
                renderBinaryInput();
                renderGrid();
            });
            binaryInput.addEventListener('input', updateFontDataFromBinaryInput);
            textInput.addEventListener('input', renderCanvas);

            // Initial
            renderBinaryInput();
            renderGrid();
            renderCanvas();
        });
    </script>

    <style>
        #grid div {
            transition: background 0.2s;
        }
    </style>
</Layout>
