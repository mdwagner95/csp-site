---
import Layout from '../layouts/Layout.astro';
---

<Layout title="Binary Font Creator">
    <main class="max-w-4xl mx-auto px-4 py-8 flex flex-col gap-8">
        <h1 class="text-3xl font-bold text-center mb-6">Binary Font Creator</h1>
        <div class="flex flex-col md:flex-row gap-8">
            <!-- Left: Letter binary input -->
            <div class="flex flex-col gap-4 items-start w-full md:w-auto">
                <label class="mb-2 font-semibold">
                    Current letter:
                    <select id="letterSelect" class="ml-2 border px-2 py-1"></select>
                </label>
                <label class="font-semibold mb-1" for="binaryInput">
                    Enter 5x5 letter (1 bit per pixel, 25 pixels per letter):<br />
                    <span class="text-xs text-gray-500">(e.g. 01100... or with spaces/newlines)</span>
                </label>
                <textarea id="binaryInput" rows="7" cols="16" class="font-mono border p-2 w-[120px] h-32 text-left" spellcheck="false"></textarea>
                <button id="formatBtn" class="mt-2 px-4 py-1 bg-blue-500 text-white rounded">Readable Format</button>
            </div>
            <!-- Center: Display Grid -->
            <div class="flex flex-col items-center gap-2">
                <h2 class="font-semibold text-center">Preview Grid</h2>
                <div id="grid" class="grid grid-cols-5 gap-1 border p-2" style="width:90px"></div>
            </div>
            <!-- Right: Controls & live text preview -->
            <div class="flex-1 min-w-[220px]">
                <h2 class="font-semibold mb-2">Text Preview</h2>
                <textarea id="textInput" rows="3" class="w-full border p-2 mb-2" placeholder="A bad cat ate a bee"></textarea>
                <canvas id="previewCanvas" width="200" height="60" class="border bg-black"></canvas>
                <div class="text-xs text-gray-500 mt-1">Each row is 10 letters wide, text wraps automatically. Spaces are white squares.</div>
            </div>
        </div>
    </main>

    <script is:inline>
        document.addEventListener('DOMContentLoaded', () => {
            const letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
            const letterSelect = document.getElementById('letterSelect');
            const grid = document.getElementById('grid');
            const textInput = document.getElementById('textInput');
            const binaryInput = document.getElementById('binaryInput');
            const formatBtn = document.getElementById('formatBtn');
            const canvas = document.getElementById('previewCanvas');
            const ctx = canvas.getContext('2d');

            // Default pattern for 'A'
            const defaultA = '11011\n10101\n10001';

            // Font data: each letter starts as blank except 'A'
            const fontData = {};
            letters.split('').forEach((l) => {
                fontData[l] = l === 'A' ? defaultA : '';
            });

            // Populate dropdown
            letters.split('').forEach((l) => {
                const opt = document.createElement('option');
                opt.value = l;
                opt.textContent = l;
                letterSelect.appendChild(opt);
            });

            let currentLetter = letters[0];
            letterSelect.value = currentLetter;

            function binToColor(bin) {
                if (bin === '0') return '#111';
                if (bin === '1') return '#fff';
                return '#fbb6ce'; // light pink for error/missing
            }

            // Parse user input into array of bits, up to 25
            function parseBinaryInput(str) {
                // Only 0/1 allowed, split each char
                const bits = str.replace(/[^01]/g, '');
                return bits.split('').slice(0, 25);
            }

            // Render the grid (display only, 5x5)
            function renderGrid() {
                grid.innerHTML = '';
                const raw = fontData[currentLetter] || '';
                const arr = parseBinaryInput(raw);
                for (let i = 0; i < 25; i++) {
                    const bin = arr[i];
                    const cell = document.createElement('div');
                    cell.className = 'w-6 h-6 border border-gray-300';
                    cell.style.backgroundColor = binToColor(bin);
                    grid.appendChild(cell);
                }
            }

            // Render binary textarea for current letter (as raw text)
            function renderBinaryInput() {
                binaryInput.value = fontData[currentLetter] || '';
            }

            function updateFontDataFromBinaryInput() {
                fontData[currentLetter] = binaryInput.value;
                renderGrid();
                renderCanvas();
            }

            // 5 bits per line, 5 lines, spaces between bits
            function readableFormat(raw) {
                const arr = parseBinaryInput(raw);
                let out = [];
                for (let row = 0; row < 5; row++) {
                    let line = [];
                    for (let col = 0; col < 5; col++) {
                        const idx = row * 5 + col;
                        if (typeof arr[idx] !== 'undefined') {
                            line.push(arr[idx]);
                        }
                    }
                    if (line.length) out.push(line.join(' '));
                }
                return out.join('\n');
            }

            // Draw the preview canvas (10 chars per line, wrap as needed)
            function renderCanvas() {
                ctx.clearRect(0, 0, canvas.width, canvas.height);
                ctx.fillStyle = 'black';
                ctx.fillRect(0, 0, canvas.width, canvas.height);
                // Use default phrase if box is empty
                const text = textInput.value || textInput.placeholder;
                const pixelSize = 4;
                const charsPerLine = 10;
                const lines = Math.ceil(text.length / charsPerLine);

                for (let l = 0; l < lines; l++) {
                    for (let i = 0; i < charsPerLine; i++) {
                        const charIdx = l * charsPerLine + i;
                        if (charIdx >= text.length) break;
                        const char = text[charIdx];
                        if (char === ' ') {
                            // Draw a 5x5 white square for space
                            ctx.fillStyle = '#fff';
                            ctx.fillRect(i * 5 * pixelSize, l * 5 * pixelSize, 5 * pixelSize, 5 * pixelSize);
                            continue;
                        }
                        const upChar = char.toUpperCase();
                        const raw = fontData[upChar] || '';
                        const arr = parseBinaryInput(raw);
                        for (let row = 0; row < 5; row++) {
                            for (let col = 0; col < 5; col++) {
                                const idx = row * 5 + col;
                                const bin = arr[idx];
                                ctx.fillStyle = binToColor(bin);
                                ctx.fillRect(i * 5 * pixelSize + col * pixelSize, l * 5 * pixelSize + row * pixelSize, pixelSize, pixelSize);
                            }
                        }
                    }
                }
            }

            letterSelect.addEventListener('change', (e) => {
                currentLetter = e.target.value;
                renderBinaryInput();
                renderGrid();
            });
            binaryInput.addEventListener('input', () => {
                updateFontDataFromBinaryInput();
            });
            textInput.addEventListener('input', renderCanvas);
            formatBtn.addEventListener('click', () => {
                binaryInput.value = readableFormat(binaryInput.value);
                updateFontDataFromBinaryInput();
            });

            // Set default preview text
            textInput.value = 'A bad cat ate a bee';

            // Initial
            renderBinaryInput();
            renderGrid();
            renderCanvas();
        });
    </script>

    <style>
        #grid {
            box-sizing: content-box;
        }
        #grid div {
            transition: background 0.2s;
            width: 16px;
            height: 16px;
            box-sizing: border-box;
        }
        #grid > div:nth-child(5n) {
            margin-right: 0;
        }
    </style>
</Layout>
